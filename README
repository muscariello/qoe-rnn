RELEASE NOTES:

string compare for codec is implemented. codec listed in "codec.conf"; Possible definition of the same codec should 
be in the same line seperated by TAB or SPACE; Different codec occupies different lines. Normalization vector 
for codec column should be set to '1' manually for best performances.
In principle, it process the input file(ie. abc.txt), find and replace the codec string with some value, store it 
to another file(ie. abc.txt.dat). When the training/test starts it will tried to load the .dat file first. Only if 
.dat doesn't exist will it load the original file(abc.txt)
This feature is independent from CRNN class.

Randomized training order is implemented by CSEQ class. However it has been disabled since I didn't see the benefit.
To activate, check crnn.cpp:L846 and L847

Inappropriate boundary check under MAC is fixed.

Now the lib has been splited into two classes, CRNN_T and the derived class CRNN
|-> CRNN_T contains only the necessary parts for evaluation phase. The corresponding application is app_cli
|-> CRNN works just like the same class in previous release. The application rnnlite is also essentialy the same.

Trained weight matrix is still "weightTemplate.dat" but a copy named "weight.dat" is also there to utlize the
default weight matrix filename;

Arguments for rnnlite can be stored in an external file named "arg.conf" to avoid having to specify a long list 
of arguments everytime you use it.
Since I've ALREADY put 
"-train -compact -w weight.dat -i train_1.1B.txt -v testB.txt -o outB.txt -n 264,1024,35,25,5 -m 2000 -p 4,5,1"
in that file, do remember to erase this file if you don't want these arguments to be passed to rnnlite.


**********************************************************************************************************
SUGGESTED USAGE
[SIMPLE TRAINING]
1)Since I've ALREADY put 
 "-train -compact -w weight.dat -i train_1.1B.txt -v testB.txt -o outB.txt -n 1,1024,35,25,5 -m 2000 -p 4,5,1".
 in "arg.conf"
2)Execute 
	"./rnnlite"
 -This wil training the RNN with data in train_1.1B.txt and use it on testB.txt to obtain the MSE score;
 -Trained weight matrix stored in "weight.dat" since it's the default filename.

[SIMPLE TEST]
1)Make sure "weight.dat" is in current directory.
2)Execute
 	"./app_cli -inline H.264,1024,1.6,1 "
 to generated the corresponding MOS, print to cout;

[TESTING]
1) Empty "arg.conf" file.
To reuse trained RNN on new test subjects, execute
	"./rnnlite -test -compact -p 4,5,1 -n 264,1024,35,25,5 -m 700"
last line of screen output indicates test score(MSE);
predication of test data stored at "output.txt", weight matrix saved to "weight.dat";

**********************************************************************************************************
NAME 
	app_cli	-- client side application for MOS evaluation ONLY.
SYNOPSIS
	app_cli [-inline INPUT_VECTOR] 
		[-w FILENAME] [-o FILENAME] [-h]
DESCRIPTION
	[-inline INPUT_VECTOR]
		provide input parameter vectors here and generate output for it directly.
		seperate different parameters in [INPUT_VECTOR] by ',' Example:
			./app_cli -inline 264,1024,1.6,1
	[-w FILENAME]
		override weight matrix filename. "weight.dat" by default.
	[-o FILENAME]
		Designate a filename to print the evaluation output instead of using cout directly.
		Also de-activate quiet mode so that some debug info will be printed to cout
	[-h]
		Print help msg.

COMMENTS
	client side application capable of evaluating MOS from trained RNN network.
	Weight file should be prepared beforehand, "weight.dat" by default.
	Input data should be provided by [-inline INPUT_VECTOR]
	print MOS on screen by default. [-o FILENAME] will redirect it to external file
	if weight file is generated by recurrent RNN, app_cli will also use recurrent RNN.

**********************************************************************************************************
NAME 
	rnnlite	-- simplified Random Neural Network
SYNOPSIS
	rnnlite [-train|-test] [-p topology_specification] [-t normalization_vector] [OTHER OPTIONS]
DESCRIPTION
	the following parameters are mandatory:
	[-train|-test]	
		specify if it's a training run or test run. The input filename for train run is 
		"train.txt" by default. input filename for test run is "test.txt" by default. Expected
		output data for train run is read from "target.txt" by default.
		content of "train.txt" and "target.txt" can be provided in a single file by specifying 
		[-compact]
	[-p topology_specification]
		topology_specification indicates RNN topology. Seperated by comma. 
		Example: [-p 5,3,4,2] 
			5 input nodes, 3 hidden nodes in 1st hidden layer, 4 hidden nodes in 2nd hidden 
			layer, 2 output nodes.
	[-n normalization_vector]
		Specify upper boundary for input vector, ie the largest value possible for that parameter. 
		Mandatory. Dimension must match with input file. Size is the sum of input nodes and output
		nodes.
		[normalization_vector] 
		Example: [-n 264,1024,10,35,25,5,5]
			5 input nodes, 2 output nodes.
	
the following parameters are optional:
	[-inline input_parameters]
		provide input parameter vectors here and generate output for it directly.
		seperate different parameters by ',' Example:
			./rnn_lite -inline 264,1024,1.6,1
	[-compact]
		in training run, train and target data are stored in the same file. 
		in test run, test and validatioin date are stored in the same file.
	[-recursive]
		recursive RNN. Full mesh.
	[-verbose]
		Verbose output with additional debug info.
	[-i filename]
		override training data input filename. "train.txt" by default.
	[-t filename]
		override target data input filename. "target.txt" by default. Doesn't work with [-compact]
	[-v filename]
		override test data input filename. "test.txt" by default.
	[-o filename]
		override output filename. "output.txt" by default.
	[-w filename]
		override weight matrix filename. "weight.dat" by default.
	[-m max_iter]
		override maximum iteration limit (2000 by default).
	[-threshold float_number]
		override default Mean Square Error threshold.
	[-h]
		print help msg.		

COMMENTS
	training , test and target file must indicate the number of input nodes and total number of sample 
	data sets in the first row. 
	For example in non-compact mode a train.txt with 3 sample should looks like:
	5	3
	264	1024	0.5	0	25
	264	1024	5	3	5
	264	512	10	10	1

	while in compact mode target info can be provided inside training data like:
	5	3
	264	1024	0.5	0	25	4.0	4.8
	264	1024	5	3	5	3.1	4.8
	264	512	10	10	1	3.0	3.0

	In training mode program will use train and target data to train RNN till MSE reaches threshold
	[-threshold float_number] or maximum iteration[-m max_iter]. Resulting weight matrix will be saved 
	to file. 
	Then if test data is available it will continue the test phase, print output to screen and file. 
	Calculate test MSE and print on screen as well.

	In test mode program will attempt to read privous weight information from file then do a test
	run. Save output to file and print test MSE on screen. Program doesn't check if loaded weight matrix 
	coincide the test data structure so be sure you know which matrix you're loading.

**********************************************************************************************************
LIBRARY USAGE

	#include "crnn_t.h"
	using namespace std;
	using namespace rnn_lite;
	main(int argc, char** argv){
	CRNN_T rnn;

	// used here a customized function for initiation, using CRNN_T::loadInputCmd()
	// check the sample app_cli.cpp::parse_args() for reference.
	example_parse_args(&rnn);
	
	rnn.test();x
	}
	-------------------------------------------------------------------------------------------------

	#include "crnn.h"
	#include "argument_exception.h"
	using namespace std;
	using namespace rnn_lite;
	main(int argc, char** argv){
	CRNN rnn;

	// used here a customized function to initiate certain object propertyies such as mode and topology
	// check the sample main.cpp::parse_args() for reference.
	example_parse_args(&rnn);

	rnn.loadInput();
	rnn.train(&MSEthreshold,0);
	rnn.test();
	}


**********************************************************************************************************
What's new
100110
	fixed bug in CRNN::test() state check with "./rnnlite -test "
091202	rnnlite output cleaned up.(-verbose to override)
	fixed RECURSIVE flag now included in weight file 
	added Codec-to-int conversion( main.cpp::parse_args_codec and app_cli.cpp::parse_args_codec_cmd() )
	added Recurrent RNN  
	fixed bug in input boundary check under MAC OS
	added class CSEQ to support randomized sequence.
	added randomized training order (!Disabled. switch at crnn.cpp::Line 938 & 939)
	included cmath library instead of math.h
091106 	abs() and fabs() replaced by customized function 
	added quiet mode as default mode for "app_cli"
	added client side application "app_cli"
	CRNN splited into two classes
	topology and normalize_vector embeded into weight file
091102	added Makefile 
	preload external arguments from "args.conf"
	extend FLAG coverage for input filename state check
	added test score output scheme
	fixed stand-alone test run scheme
	fixed target file loading scheme
	now loadInput() will call initialize_architecture() and initialize_normalization_vector() automaticly.
091006	First release.	
